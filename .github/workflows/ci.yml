name: Test

on: [pull_request, push]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        elixir: [1.10.4]
        otp: [23.1.1]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-elixir@v1
        with:
          otp-version: ${{ matrix.otp }}
          elixir-version: ${{ matrix.elixir }}
      - name: Retrieve Mix Dependencies Cache
        uses: actions/cache@v1
        id: mix-cache # id to use in retrieve action
        with:
          path: deps
          key: ${{ matrix.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
      - name: Install Mix Dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
      - name: Ensure Code is Formatted
        run: mix format --check-formatted
      - name: Compile for Tests
        run: MIX_ENV=test mix compile --warnings-as-errors
      - name: Run Tests
        run: mix test
  release:
    needs: build_and_test
    # if: github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        elixir: [1.10.4]
        otp: [23.1.1]
        os: ["ubuntu-latest"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-elixir@v1
        with:
          otp-version: ${{ matrix.otp }}
          elixir-version: ${{ matrix.elixir }}
      - name: Retrieve Mix Dependencies Cache
        uses: actions/cache@v1
        id: mix-cache # id to use in retrieve action
        with:
          path: deps
          key: ${{ matrix.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
      - name: Install Mix Dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
      - name: Install Bakeware Dependencies
        if: matrix.os == 'ubuntu-latest'
        run:
          apt install -y zstd
      - name: Generate Release
        run: rm -fr _build && mix release
      - name: Rename Executable
        run: cp ./dist/fika fika_${{ matrix.os }}
      - name: Save Executable
        uses: actions/upload-artifact@v2
        with:
          name: fika_${{ matrix.os }}
          path: fika_${{ matrix.os }}
  publish:
    needs: release
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Fetch release artifacts
        uses: actions/download-artifact@v2
        with:
          name: fika_ubuntu-latest
      - name: Upload Artifacts
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: fika_ubuntu-latest
